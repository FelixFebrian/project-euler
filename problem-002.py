"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four
million, find the sum of the even-valued terms.
"""


def test_get_even_fibonacci_sequence():
    assert sum(get_even_fibonacci_sequence(10)) == 10
    assert sum(get_even_fibonacci_sequence(20)) == 10
    assert sum(get_even_fibonacci_sequence(30)) == 10
    assert sum(get_even_fibonacci_sequence(40)) == 44


def get_even_fibonacci_sequence(max_sequence: int = int(4 * (10 ** 6))) -> list:
    sequence: list = []
    a = 1
    b = 1
    c = a + b
    while c < max_sequence:
        if c % 2 == 0:
            sequence.append(c)
        a = b
        b = c
        c = a + b

    return sequence


def sum_of_even_valued_fibonacci_numbers() -> int:
    """Sum of even valued Fibonacci numbers.

    The values of the Fibonacci sequence should not exceed four millions.

    Returns:
        int: returned sum.
    """
    return sum(get_even_fibonacci_sequence())


if __name__ == "__main__":
    print(
        "Sum of even valued Fibonacci numbers: {}".format(
            sum_of_even_valued_fibonacci_numbers()
        )
    )
